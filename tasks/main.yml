---
# Copyright 2015, Jean-Philippe Evrard <jean-philippe@evrard.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- include: keepalived_selinux.yml
  when:
    - keepalived_selinux_compile_rules | length > 0
    - ansible_selinux.status is defined
    - ansible_selinux.status == "enabled"
  tags:
    - keepalived-config

- name: Install keepalived with packages
  block:
    - name: install keepalived
      package:
        name: "{{ keepalived_package_name }}"
        state: "{{ keepalived_package_state }}"
        update_cache: "{{ (ansible_pkg_mgr == 'apt') | ternary('yes', omit) }}"
        cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
      tags:
        - keepalived-apt-packages
        - keepalived-packages
      notify:
        - restart keepalived

    - name: Ensure no new "samples" folder appeared
      file:
        path: /etc/keepalived/samples/
        state: absent
      when:
        - ansible_os_family | lower == 'debian'
  when:
    - not keepalived_snap | bool

- name: Install keepalived with snap
  block:
    - name: Ensure snapd.service is enabled and running
      ansible.builtin.service:
        name: "{{ keepalived_snap_snapd_service }}"
        enabled: true
        state: started

    - name: Check snap core and keepalived are installed
      ansible.builtin.uri:
        unix_socket: "{{ keepalived_snap_snapd_socket }}"
        url: "http://localhost/v2/snaps/{{ item }}"
        method: GET
        return_content: true
        status_code:
          - 200
          - 404
      register: chk_snaps
      loop:
        - core
        - keepalived

    - name: Install snap core and keepalived
      ansible.builtin.uri:
        unix_socket: "{{ keepalived_snap_snapd_socket }}"
        url: "http://localhost/v2/snaps/{{ item.json.result.value }}"
        method: POST
        body:
          action: install
          classic: "{{ classic }}"
        body_format: json
        return_content: true
        status_code: 202
      vars:
        classic: "{{ (item.json.result.value == 'keepalived') | ternary(true, false) }}"
      register: install_snaps
      when:
        - item.status == 404
      loop: "{{ chk_snaps.results }}"

    - name: Wait for snap core and keepalived to be installed
      ansible.builtin.uri:
        unix_socket: "{{ keepalived_snap_snapd_socket }}"
        url: "http://localhost/v2/changes/{{ item.json.change }}"
        method: GET
        return_content: true
      failed_when: change_snaps.json.status == "Error"
      register: change_snaps
      until: change_snaps.json.result.ready
      retries: 5
      delay: 10
      when:
        - item is not skipped
      loop: "{{ install_snaps.results }}"

    - name: Check keepalived snap daemon disabled
      ansible.builtin.uri:
        unix_socket: "{{ keepalived_snap_snapd_socket }}"
        url: "http://localhost/v2/apps?select=service&names=keepalived"
        method: GET
        return_content: true
      register: chk_keepalived_snap_daemon

    - name: Disable keepalived snap daemon via API
      ansible.builtin.uri:
        unix_socket: "{{ keepalived_snap_snapd_socket }}"
        url: http://localhost/v2/apps
        method: POST
        body:
          names:
            - keepalived
          action: stop
          disable: true
        status_code: 202
        body_format: json
        return_content: true
      register: stop_disable_keepalived_snap_daemon
      changed_when:
        (chk_keepalived_snap_daemon.json |
          community.general.json_query("result[?name == 'daemon' && snap == 'keepalived'].enabled | [0]") |
          ternary(true, false, false)) or
        (chk_keepalived_snap_daemon.json |
          community.general.json_query("result[?name == 'daemon' && snap == 'keepalived'].active | [0]") |
          ternary(true, false, false))
      when:
        (chk_keepalived_snap_daemon.json |
          community.general.json_query("result[?name == 'daemon' && snap == 'keepalived'].enabled | [0]") |
          ternary(true, false, false)) or
        (chk_keepalived_snap_daemon.json |
          community.general.json_query("result[?name == 'daemon' && snap == 'keepalived'].active | [0]") |
          ternary(true, false, false))

    - name: Wait for keepalived snap daemon to be disabled
      ansible.builtin.uri:
        unix_socket: "{{ keepalived_snap_snapd_socket }}"
        url: "http://localhost/v2/changes/{{ stop_disable_keepalived_snap_daemon.json.change }}"
        method: GET
        return_content: true
      failed_when: stop_disable_snap.json.status == "Error"
      register: stop_disable_snap
      until: stop_disable_snap.json.result.ready
      retries: 5
      delay: 10
      when: stop_disable_keepalived_snap_daemon is not skipped

    - name: Configure keepalived service if snapd
      template:
        src: keepalived-snap.service.j2
        dest: /etc/systemd/system/keepalived.service
        mode: 0644
      when:
        - keepalived_snap_systemd_service | bool
      notify:
        - restart keepalived

  tags:
    - keepalived-snap
  when:
    - keepalived_snap | bool

- name: Allow consuming apps to bind on non local addresses
  sysctl:
    name: "{{ item }}"
    value: "1"
    sysctl_set: yes
    state: present
  when: keepalived_bind_on_non_local | bool
  with_items:
    - "net.ipv4.ip_nonlocal_bind"
    - "net.ipv6.ip_nonlocal_bind"
  tags:
    - keepalived-install

- name: Configure keepalived
  template:
    src: keepalived.conf.j2
    dest: "{{ keepalived_config_file_path }}"
    mode: "0640"
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Check that daemon options file exists
  stat:
    path: "{{ keepalived_daemon_options_file_path }}"
  register: keepalived_daemon_options_file
  tags:
    - keepalived-config

- name: Configure keepalived extra params
  lineinfile:
    line: "{{ item }}"
    regexp: "^{{ item.split('=')[0] }}"
    dest: "{{ keepalived_daemon_options_file_path }}"
    state: present
  with_items: "{{ keepalived_daemon_default_options_overrides }}"
  when: keepalived_daemon_options_file.stat.exists
  tags:
    - keepalived-config
  notify:
    - restart keepalived

- name: Dropping the tracking scripts
  copy:
    src: "{{ item.value.src_check_script }}"
    dest: "{{ item.value.dest_check_script|default(item.value.check_script) }}"
    mode: "0755"
  with_dict: "{{ keepalived_scripts | default('{}') }}"
  when: item.value.src_check_script is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the general notification scripts
  copy:
    src: "{{ item.value.src_notify_script }}"
    dest: "{{ item.value.notify_script }}"
    mode: "0755"
  with_dict: "{{ keepalived_sync_groups }}"
  when: item.value.src_notify_script is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for switching to master
  copy:
    src: "{{ item.value.src_notify_master }}"
    dest: "{{ item.value.notify_master }}"
    mode: "0755"
  with_dict: "{{ keepalived_sync_groups }}"
  when: item.value.src_notify_master is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for lower priority master case
  copy:
    src: "{{ item.value.src_notify_master_rx_lower_pri }}"
    dest: "{{ item.value.notify_master_rx_lower_pri }}"
    mode: "0755"
  with_dict: "{{ keepalived_sync_groups }}"
  when: item.value.src_notify_master_rx_lower_pri is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for switching to backup
  copy:
    src: "{{ item.value.src_notify_backup }}"
    dest: "{{ item.value.notify_backup }}"
    mode: "0755"
  with_dict: "{{ keepalived_sync_groups }}"
  when: item.value.src_notify_backup is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for failures
  copy:
    src: "{{ item.value.src_notify_fault }}"
    dest: "{{ item.value.notify_fault }}"
    mode: "0755"
  with_dict: "{{ keepalived_sync_groups }}"
  when: item.value.src_notify_fault is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the general notification scripts (instances)
  copy:
    src: "{{ item.value.src_notify_script }}"
    dest: "{{ item.value.notify_script }}"
    mode: "0755"
  with_dict: "{{ keepalived_instances }}"
  when: item.value.src_notify_script is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for switching to master (instances)
  copy:
    src: "{{ item.value.src_notify_master }}"
    dest: "{{ item.value.notify_master }}"
    mode: "0755"
  with_dict: "{{ keepalived_instances }}"
  when: item.value.src_notify_master is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for lower priority master case (instances)
  copy:
    src: "{{ item.value.src_notify_master_rx_lower_pri }}"
    dest: "{{ item.value.notify_master_rx_lower_pri }}"
    mode: "0755"
  with_dict: "{{ keepalived_instances }}"
  when: item.value.src_notify_master_rx_lower_pri is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for switching to backup (instances)
  copy:
    src: "{{ item.value.src_notify_backup }}"
    dest: "{{ item.value.notify_backup }}"
    mode: "0755"
  with_dict: "{{ keepalived_instances }}"
  when: item.value.src_notify_backup is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for stopping vrrp (instances)
  copy:
    src: "{{ item.value.src_notify_stop }}"
    dest: "{{ item.value.notify_stop }}"
    mode: "0755"
  with_dict: "{{ keepalived_instances }}"
  when: item.value.src_notify_stop is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Dropping the notification scripts for failures (instances)
  copy:
    src: "{{ item.value.src_notify_fault }}"
    dest: "{{ item.value.notify_fault }}"
    mode: "0755"
  with_dict: "{{ keepalived_instances }}"
  when: item.value.src_notify_fault is defined
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Make directory for keepalived's systemd overrides
  file:
    path: /etc/systemd/system/keepalived.service.d/
    state: directory
    mode: "0755"
  when:
    - keepalived_systemd_overrides | bool
    - not keepalived_snap | bool

- name: Apply keepalived override to start after network is up
  ini_file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    create: yes
    section: 'Unit'
    option: "{{ item }}"
    value: 'network-online.target'
    mode: '0644'
  with_items:
    - 'Wants'
    - 'After'
  when:
    - keepalived_systemd_overrides | bool
    - not keepalived_snap | bool
  notify:
    - restart keepalived

- name: Apply keepalived override to restart service always
  ini_file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    section: 'Service'
    option: "Restart"
    value: 'always'
    mode: '0644'
  when:
    - keepalived_systemd_overrides | bool
    - keepalived_systemd_override_service_restart | bool
  notify:
    - restart keepalived

- name: Remove keepalived overrides
  file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    state: absent
  when:
    - not (keepalived_systemd_overrides | bool)

# Until  https://github.com/ansible/ansible/pull/72337 is fixed, we need to not use
# the service/systemd module.
#- name: Ensuring keepalived is enabled
#  service:
#    daemon_reload: yes
#    name: "{{ keepalived_service_name }}"
#    enabled: "yes"
#    masked: "no"
#

# Reload systemd is necessary if new packages, or changes of overrides.
# Because there is no notify on those tasks, and that the notify would be happening after the
# task to ensure keepalived is enabled, move it to an unconditional task here.
# When the bug above is fixed with the service/systemd module, ensure everything is
# done in a single handler, tackling the daemon-reloads and the restart of the service,
# plus a single task, handling the daemon-reload and ensuring the service is enabled
# on the first install (the changes in systemd files would have to trigger the
# handler to restart the service).
- name: Check if keepalived is enabled
  shell: "systemctl daemon-reload && systemctl is-enabled {{ keepalived_service_name }}"
  register: isenabled
  changed_when: (isenabled.stdout == "disabled" or isenabled.stdout == "masked") and isenabled.rc != 0
  failed_when: (isenabled.stdout != "disabled" and isenabled.stdout != "masked") and isenabled.rc != 0
  tags:
    - skip_ansible_lint

- name: Unmask keepalived if necessary
  command: "systemctl unmask {{ keepalived_service_name }}"
  when:
    - isenabled is changed
    - isenabled.stdout == "masked"
  tags:
    - skip_ansible_lint

- name: ensure keepalived is enabled
  command: "systemctl enable {{ keepalived_service_name }} --now"
  when:
    - isenabled is changed
  tags:
    - skip_ansible_lint
